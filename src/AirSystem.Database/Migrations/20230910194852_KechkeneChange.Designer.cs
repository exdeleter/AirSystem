// <auto-generated />
using System;
using AirSystem.Database.Contexts;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace AirSystem.Database.Migrations
{
    [DbContext(typeof(AirSystemContext))]
    [Migration("20230910194852_KechkeneChange")]
    partial class KechkeneChange
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.9")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("AirSystem.Models.Entities.Aircraft", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int>("Capacity")
                        .HasColumnType("integer")
                        .HasColumnName("capacity")
                        .HasComment("Count of seats");

                    b.Property<Guid>("ManufacturerId")
                        .HasColumnType("uuid")
                        .HasColumnName("manufacturer_id")
                        .HasComment("Id of manufacturer");

                    b.Property<int?>("MaxSpeed")
                        .HasColumnType("integer")
                        .HasColumnName("max_speed")
                        .HasComment("Max Speed");

                    b.Property<string>("Model")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("model")
                        .HasComment("Model");

                    b.Property<string>("RegistrationCode")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("registration_code")
                        .HasComment("Code of registration");

                    b.Property<int>("ReleaseYear")
                        .HasColumnType("integer")
                        .HasColumnName("release_year")
                        .HasComment("Release Year");

                    b.HasKey("Id");

                    b.HasIndex("ManufacturerId");

                    b.ToTable("aircrafts", null, t =>
                        {
                            t.HasComment("Airlcrafts");
                        });
                });

            modelBuilder.Entity("AirSystem.Models.Entities.Airline", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("CallSign")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("callsign")
                        .HasComment("Callsign");

                    b.Property<Guid>("CityId")
                        .HasColumnType("uuid")
                        .HasColumnName("city_id")
                        .HasComment("City Id");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("full_name")
                        .HasComment("Full name");

                    b.Property<string>("IATACode")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("iata_name")
                        .HasComment("IATA Code");

                    b.Property<string>("ICAOCode")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("icao_name")
                        .HasComment("ICAO Code");

                    b.Property<string>("LogoUrl")
                        .HasColumnType("text")
                        .HasColumnName("logo_url")
                        .HasComment("LogoUrl");

                    b.Property<string>("ShortName")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("short_name")
                        .HasComment("Short name");

                    b.Property<string>("Website")
                        .HasColumnType("text")
                        .HasColumnName("website")
                        .HasComment("Website");

                    b.HasKey("Id");

                    b.HasIndex("CityId");

                    b.ToTable("airlines", null, t =>
                        {
                            t.HasComment("Airlines");
                        });
                });

            modelBuilder.Entity("AirSystem.Models.Entities.Airport", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("CityId")
                        .HasColumnType("uuid")
                        .HasColumnName("city_id")
                        .HasComment("City Id");

                    b.Property<string>("IATACode")
                        .HasColumnType("text")
                        .HasColumnName("iata_name")
                        .HasComment("IATA Code");

                    b.Property<string>("ICAOCode")
                        .HasColumnType("text")
                        .HasColumnName("icao_name")
                        .HasComment("ICAO Code");

                    b.Property<double>("Latitude")
                        .HasColumnType("double precision")
                        .HasColumnName("latitude")
                        .HasComment("Latitude");

                    b.Property<double>("Longitude")
                        .HasColumnType("double precision")
                        .HasColumnName("longitude")
                        .HasComment("Longitude");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name")
                        .HasComment("Name");

                    b.Property<string>("Website")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("website")
                        .HasComment("Website");

                    b.HasKey("Id");

                    b.HasIndex("CityId");

                    b.ToTable("airports", null, t =>
                        {
                            t.HasComment("Airports");
                        });
                });

            modelBuilder.Entity("AirSystem.Models.Entities.City", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("CountryId")
                        .HasColumnType("uuid")
                        .HasColumnName("country_id")
                        .HasComment("Country id");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name")
                        .HasComment("Name");

                    b.HasKey("Id");

                    b.HasIndex("CountryId");

                    b.ToTable("cities", null, t =>
                        {
                            t.HasComment("Cities");
                        });
                });

            modelBuilder.Entity("AirSystem.Models.Entities.Country", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name")
                        .HasComment("Name");

                    b.HasKey("Id");

                    b.ToTable("countries", null, t =>
                        {
                            t.HasComment("Countries");
                        });
                });

            modelBuilder.Entity("AirSystem.Models.Entities.Crew", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Copilot")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("copilot")
                        .HasComment("Copilot");

                    b.Property<Guid>("FlightId")
                        .HasColumnType("uuid")
                        .HasColumnName("flight_id")
                        .HasComment("Flight Id");

                    b.Property<string>("Pilot")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("pilot")
                        .HasComment("Pilot");

                    b.HasKey("Id");

                    b.HasIndex("FlightId");

                    b.ToTable("crews", null, t =>
                        {
                            t.HasComment("Crews");
                        });
                });

            modelBuilder.Entity("AirSystem.Models.Entities.Flight", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("AircraftId")
                        .HasColumnType("uuid")
                        .HasColumnName("aircraft_id")
                        .HasComment("Aircraft Id");

                    b.Property<Guid>("AirlineId")
                        .HasColumnType("uuid")
                        .HasColumnName("airline_id")
                        .HasComment("Airline Id");

                    b.Property<DateTime?>("FactArrivalTime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("fact_arrival_time")
                        .HasComment("Fact Arrival Time");

                    b.Property<DateTime?>("FactDepartureTime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("fact_departure_time")
                        .HasComment("Fact Departure Time");

                    b.Property<string>("Number")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("number")
                        .HasComment("Number");

                    b.Property<Guid>("RouteId")
                        .HasColumnType("uuid")
                        .HasColumnName("route_id")
                        .HasComment("Route Id");

                    b.Property<DateTime>("ScheduledArrivalTime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("scheduled_arrival_time")
                        .HasComment("Scheduled Arrival Time");

                    b.Property<DateTime>("ScheduledDepartureTime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("scheduled_departure_time")
                        .HasComment("Scheduled Departure Time");

                    b.HasKey("Id");

                    b.HasIndex("AircraftId");

                    b.HasIndex("AirlineId");

                    b.HasIndex("RouteId");

                    b.ToTable("flights", null, t =>
                        {
                            t.HasComment("Flights");
                        });
                });

            modelBuilder.Entity("AirSystem.Models.Entities.Manufacturer", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name")
                        .HasComment("Name");

                    b.HasKey("Id");

                    b.ToTable("manufacturers", null, t =>
                        {
                            t.HasComment("Manufacturers");
                        });
                });

            modelBuilder.Entity("AirSystem.Models.Entities.Passenger", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("first_name")
                        .HasComment("First Name");

                    b.Property<Guid>("FlightId")
                        .HasColumnType("uuid")
                        .HasColumnName("flight_id")
                        .HasComment("Flight Id");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("last_name")
                        .HasComment("Last Name");

                    b.Property<string>("SeatNumber")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("seat_number")
                        .HasComment("Seat number");

                    b.HasKey("Id");

                    b.HasIndex("FlightId");

                    b.ToTable("passengers", null, t =>
                        {
                            t.HasComment("Passengers");
                        });
                });

            modelBuilder.Entity("AirSystem.Models.Entities.Route", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("ArrivalAirportId")
                        .HasColumnType("uuid")
                        .HasColumnName("arrival_airport_id")
                        .HasComment("Arrival airport's Id");

                    b.Property<Guid>("DepartureAirportId")
                        .HasColumnType("uuid")
                        .HasColumnName("departure_airport_id")
                        .HasComment("Departure Airport's Id");

                    b.Property<double>("Distance")
                        .HasColumnType("double precision")
                        .HasColumnName("distance")
                        .HasComment("Distance");

                    b.Property<TimeSpan>("Duration")
                        .HasColumnType("interval")
                        .HasColumnName("duration")
                        .HasComment("Duration");

                    b.HasKey("Id");

                    b.HasIndex("ArrivalAirportId");

                    b.HasIndex("DepartureAirportId");

                    b.ToTable("routes", null, t =>
                        {
                            t.HasComment("Routes");
                        });
                });

            modelBuilder.Entity("AirSystem.Models.Entities.Aircraft", b =>
                {
                    b.HasOne("AirSystem.Models.Entities.Manufacturer", "Manufacturer")
                        .WithMany()
                        .HasForeignKey("ManufacturerId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Manufacturer");
                });

            modelBuilder.Entity("AirSystem.Models.Entities.Airline", b =>
                {
                    b.HasOne("AirSystem.Models.Entities.City", "City")
                        .WithMany()
                        .HasForeignKey("CityId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("City");
                });

            modelBuilder.Entity("AirSystem.Models.Entities.Airport", b =>
                {
                    b.HasOne("AirSystem.Models.Entities.City", "City")
                        .WithMany()
                        .HasForeignKey("CityId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("City");
                });

            modelBuilder.Entity("AirSystem.Models.Entities.City", b =>
                {
                    b.HasOne("AirSystem.Models.Entities.Country", "Country")
                        .WithMany()
                        .HasForeignKey("CountryId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Country");
                });

            modelBuilder.Entity("AirSystem.Models.Entities.Crew", b =>
                {
                    b.HasOne("AirSystem.Models.Entities.Flight", "Flight")
                        .WithMany()
                        .HasForeignKey("FlightId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Flight");
                });

            modelBuilder.Entity("AirSystem.Models.Entities.Flight", b =>
                {
                    b.HasOne("AirSystem.Models.Entities.Aircraft", "Aircraft")
                        .WithMany()
                        .HasForeignKey("AircraftId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("AirSystem.Models.Entities.Airline", "Airline")
                        .WithMany()
                        .HasForeignKey("AirlineId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("AirSystem.Models.Entities.Route", "Route")
                        .WithMany()
                        .HasForeignKey("RouteId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Aircraft");

                    b.Navigation("Airline");

                    b.Navigation("Route");
                });

            modelBuilder.Entity("AirSystem.Models.Entities.Passenger", b =>
                {
                    b.HasOne("AirSystem.Models.Entities.Flight", "Flight")
                        .WithMany()
                        .HasForeignKey("FlightId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Flight");
                });

            modelBuilder.Entity("AirSystem.Models.Entities.Route", b =>
                {
                    b.HasOne("AirSystem.Models.Entities.Airport", "ArrivalAirport")
                        .WithMany()
                        .HasForeignKey("ArrivalAirportId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("AirSystem.Models.Entities.Airport", "DepartureAirport")
                        .WithMany()
                        .HasForeignKey("DepartureAirportId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("ArrivalAirport");

                    b.Navigation("DepartureAirport");
                });
#pragma warning restore 612, 618
        }
    }
}
